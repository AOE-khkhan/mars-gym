Quick Start
================================

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

Dataset
*******

.. code-block:: python

  >>> from mars_gym.data import utils
  >>> utils.datasets()
  ['random',
 'yoochoose',
 'processed_yoochoose',
 'trivago_rio',
 'processed_trivago_rio']

  >>> df, df_meta = utils.load_dataset('processed_trivago_rio')
  >>> df.head()
    session_id    user_id       timestamp   action_type	      item_id	impressions                                       list_reference_item                             pos_item_id clicked
  0 05fe82b496fb9 M1Z13DD0P2KH  1541422443  clickout item     4304686	['109351', '150138', '4345728', '105014', '478'... ['', '', '', '', '']                            7           1.0
  1 05fe82b496fb9 M1Z13DD0P2KH  1541422474  clickout item     960255	['1475717', '5196406', '104880', '109351', '68'... ['4304686', '', '', '', '']                     20          1.0
  2 05fe82b496fb9 M1Z13DD0P2KH  1541423039  clickout item     2188598	['104558', '326781', '104786', '1223390', '206'... ['4304686', '960255', '', '', '']               9           1.0
  3 05fe82b496fb9 M1Z13DD0P2KH  1541424631  clickout item     8459162	['105014', '5659850', '478121', '109351', '956'... ['4304686', '960255', '2188598', '', '']        23          1.0
  4 05fe82b496fb9 M1Z13DD0P2KH  1541424685  interaction info  8459162	NaN                                                ['4304686', '960255', '2188598', '8459162', ''] -1          0.0

  >>> df_meta[['list_metadata']].head()
    list_metadata
  0 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ...
  1 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
  2 [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, ...
  3 [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, ...
  4 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, ...


Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.



Prepare data
************

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  class PrepareInteractionData(luigi.Task):
      def requires(self):
          return DownloadDataset(dataset="processed_trivago_rio", output_path=OUTPUT_PATH)

      def output(self):
          return luigi.LocalTarget(os.path.join(DATASET_DIR, "dataset.csv",))

      def run(self):
          os.makedirs(DATASET_DIR, exist_ok=True)

          df = pd.read_csv(self.input()[0].path)

          # .... transform dataset

          df.to_csv(self.output().path)


  class PrepareMetaData(luigi.Task):
      def requires(self):
          return DownloadDataset(dataset="processed_trivago_rio", output_path=OUTPUT_PATH)

      def output(self):
          return luigi.LocalTarget(os.path.join(DATASET_DIR, "metadata.csv",))

      def run(self):
          os.makedirs(DATASET_DIR, exist_ok=True)

          df = pd.read_csv(self.input()[1].path)

          # .... transform dataset

          df.to_csv(self.output().path, index="item_id")


Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  class PrepareTrivagoDataFrame(BasePrepareDataFrames):
      def requires(self):
          return (
              PrepareInteractionData(),
              PrepareMetaData(),
          )

      @property
      def timestamp_property(self) -> str:
          return "timestamp"

      @property
      def dataset_dir(self) -> str:
          return DATASET_DIR

      @property
      def read_data_frame_path(self) -> pd.DataFrame:
          return self.input()[0].path

      @property
      def metadata_data_frame_path(self) -> Optional[str]:
          return self.input()[1].path

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


.. code-block:: python

  >>> job = PrepareTrivagoDataFrame()
  PrepareTrivagoDataFrame(session_test_size=0.1, test_size=0.2, sample_size=-1,
  minimum_interactions=5, dataset_split_method=time, column_stratification=None,
  test_split_type=random, n_splits=10, split_index=0, val_size=0.2,
  sampling_strategy=none, balance_fields=[], sampling_proportions={},
  use_sampling_in_validation=False, eq_filters={}, neq_filters={},
  isin_filters={}, seed=42)

  >>> luigi.build([job], local_scheduler=True)
  ....
  INFO: Worker Worker(salt=154256821, workers=1, host=marlesson-pc, username=marlesson,
  pid=16527) was stopped. Shutting down Keep-Alive thread
  INFO:
  ===== Luigi Execution Summary =====

  Scheduled 4 tasks of which:
  * 4 ran successfully:
      - 1 DownloadDataset(output_path=output, dataset=processed_trivago_rio)
      - 1 PrepareInteractionData()
      - 1 PrepareMetaData()
      - 1 PrepareTrivagoDataFrame(...)

  This progress looks :) because there were no failed tasks or missing dependencies

  ===== Luigi Execution Summary =====

  >>> [o.path for o in job.output()]
  ['.../train_cc25c002c7.csv',
  '.../val_cc25c002c7.csv',
  '.../test_cc25c002c7.csv',
  '.../metadata.csv']

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


* DATASET_DIR/train_cc25c002c7.csv
* DATASET_DIR/val_cc25c002c7.csv
* DATASET_DIR/test_cc25c002c7.csv
* DATASET_DIR/metadata.csv


Configuration
*************

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  from mars_gym.data.dataset import InteractionsDataset
  from mars_gym.meta_config import *
  from samples.trivago_rio import data

  trivago_rio = ProjectConfig(
      base_dir=data.BASE_DIR,
      prepare_data_frames_task=data.PrepareTrivagoDataFrame,
      dataset_class=InteractionsDataset,
      user_column=Column("user_id", IOType.INDEXABLE),
      item_column=Column("item_id", IOType.INDEXABLE),
      available_arms_column_name="impressions",
      other_input_columns=[
          Column("pos_item_id", IOType.NUMBER),
          Column("list_reference_item", IOType.INDEXABLE_ARRAY, same_index_as="item_id"),
      ],
      metadata_columns=[Column("list_metadata", IOType.INT_ARRAY),],
      output_column=Column("clicked", IOType.NUMBER),
      recommender_type=RecommenderType.USER_BASED_COLLABORATIVE_FILTERING,
  )

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. note::
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.

Model and Simulation
********************

**Model**

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  import luigi
  from typing import Dict, Any
  import torch
  import torch.nn as nn
  from mars_gym.meta_config import ProjectConfig
  from mars_gym.model.abstract import RecommenderModule


  class SimpleLinearModel(RecommenderModule):
      def __init__(
          self,
          project_config: ProjectConfig,
          index_mapping: Dict[str, Dict[Any, int]],
      ):
        """
        build model architecture
        """
        super().__init__(project_config, index_mapping)
        #...

      def forward(
          self,
          user_ids: torch.Tensor,
          item_ids: torch.Tensor,
          pos_item_id: torch.Tensor,
          list_reference_item: torch.Tensor,
          list_metadata: torch.Tensor,
      ):
        """
        build forward
        """
        pass


Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  class SimpleLinearModel(RecommenderModule):
      def __init__(
          self,
          project_config: ProjectConfig,
          index_mapping: Dict[str, Dict[Any, int]],
          n_factors: int,
          metadata_size: int,
          window_hist_size: int,
      ):
          super().__init__(project_config, index_mapping)

          self.user_embeddings = nn.Embedding(self._n_users, n_factors)
          self.item_embeddings = nn.Embedding(self._n_items, n_factors)

          # user + item + flatten hist + position + metadata
          num_dense = 2 * n_factors + window_hist_size * n_factors + 1 + metadata_size

          self.dense = nn.Sequential(
              nn.Linear(num_dense, 500), nn.SELU(), nn.Linear(500, 1),
          )

      def flatten(self, input: torch.Tensor):
          return input.view(input.size(0), -1)

      def forward(
          self,
          user_ids: torch.Tensor,
          item_ids: torch.Tensor,
          pos_item_id: torch.Tensor,
          list_reference_item: torch.Tensor,
          list_metadata: torch.Tensor,
      ):
          user_emb = self.user_embeddings(user_ids)
          item_emb = self.item_embeddings(item_ids)
          history_items_emb = self.item_embeddings(list_reference_item)

          x = torch.cat(
              (
                  user_emb,
                  item_emb,
                  self.flatten(history_items_emb),
                  pos_item_id.float().unsqueeze(1),
                  list_metadata.float(),
              ),
              dim=1,
          )

          x = self.dense(x)
          return torch.sigmoid(x)


**Bandit**

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


.. code-block:: python

  from mars_gym.model.bandit import BanditPolicy
  from typing import Dict, Any, List, Tuple, Union

  class BasePolicy(BanditPolicy):
      def __init__(self, reward_model: nn.Module, seed: int = 42):
          """
          Initialize bandit information and params
          """
          super().__init__(reward_model)

      def _select_idx(
          self,
          arm_indices: List[int],
          arm_contexts: Tuple[np.ndarray, ...] = None,
          arm_scores: List[float] = None,
          pos: int = 0,
      ) -> Union[int, Tuple[int, float]]:
          """
          Choice the index of arm selected in turn
          """

          return action

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: python

  class EGreedyPolicy(BanditPolicy):
      def __init__(self, reward_model: nn.Module, seed: int = 42):
          super().__init__(reward_model)
          self._rng = RandomState(seed)

      def _select_idx(
          self,
          arm_indices: List[int],
          arm_contexts: Tuple[np.ndarray, ...] = None,
          arm_scores: List[float] = None,
          pos: int = 0,
      ) -> Union[int, Tuple[int, float]]:

          n_arms = len(arm_indices)
          arm_probas = np.ones(n_arms) / n_arms

          if self._rng.choice([True, False], p=[self._epsilon, 1.0 - self._epsilon]):
              action = self._rng.choice(len(arm_indices), p=arm_probas)
          else:
              action = int(np.argmax(arm_scores))

          return action

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

**Simulation**


Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


.. code-block:: python

  >>> job_train = InteractionTraining(
  >>>     project="samples.trivago_simple.config.trivago_rio",
  >>>     recommender_module_class="samples.trivago_simple.simulation.SimpleLinearModel",
  >>>     recommender_extra_params={
  >>>         "n_factors": 10,
  >>>         "metadata_size": 148,
  >>>         "window_hist_size": 5,
  >>>     },
  >>>     bandit_policy_class="samples.trivago_simple.simulation.EGreedyPolicy",
  >>>     bandit_policy_params={
  >>>         "epsilon": 0.1,
  >>>         "seed": 42
  >>>     },
  >>>     test_size=0.1,
  >>>     obs_batch_size=100,
  >>>     num_episodes=1,
  >>> )

  InteractionTraining(project=samples.trivago_simple.config.trivago_rio,
  minimum_interactions=5, session_test_size=0.1, dataset_split_method=time,
  val_size=0.2, n_splits=5, split_index=0, data_frames_preparation_extra_params={},
  sampling_strategy=none, balance_fields=[], sampling_proportions={},
  use_sampling_in_validation=False, eq_filters={}, neq_filters={}, isin_filters={},
  seed=42, observation=, negative_proportion=0.0,
  recommender_module_class=samples.trivago_simple.simulation.SimpleLinearModel,
  recommender_extra_params={"n_factors": 10, "metadata_size": 148, "window_hist_size": 5},
  device=cuda, batch_size=500, epochs=100, optimizer=adam, optimizer_params={},
  learning_rate=0.001, loss_function_params={}, gradient_norm_clipping=0.0,
  gradient_norm_clipping_type=2, early_stopping_patience=5, early_stopping_min_delta=0.001,
  monitor_metric=val_loss, monitor_mode=min, generator_workers=0, pin_memory=False,
  policy_estimator_extra_params={}, metrics=["loss"],
  bandit_policy_class=samples.trivago_simple.simulation.EGreedyPolicy,
  bandit_policy_params={"epsilon": 0.1, "seed": 42}, loss_function=crm, test_size=0.1,
  test_split_type=time, val_split_type=time, crm_ps_strategy=bandit,
  obs_batch_size=100, num_episodes=1, sample_size=-1, full_refit=False, output_model_dir=)

  >>> luigi.build([job_train], local_scheduler=True)
  ...
  ...
  0/100(t): 100%|████████████████████████████████████████████████████████████████████████████████████████| 12/12 [00:00<00:00, 30.32it/s, loss=0.0025, running_loss=0.0024]
  1/100(t): 100%|█████████████████████████████████████████████████████████████████████████████████████████| 12/12 [00:00<00:00, 45.82it/s, loss=0.003, running_loss=0.0028]
  ...
  ...
  10/100(v): 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 81.10it/s, val_loss=0.2949]

  Interaction Stats (75.36%)
            count      mean       std
  dataset
  all      7300.0  0.044110  0.205353
  train    5840.0  0.042808  0.202442
  valid    1460.0  0.049315  0.216599

  Saving logs...
  Saving test set predictions...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 4063441.72it/s]
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 3831989.55it/s]
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:16<00:00, 151.33it/s]

  INFO: Informed scheduler that task   InteractionTraining____samples_trivago____epsilon___0_1__4fc1370d9d   has status   DONE
  2020-06-22 08:41:37,842 : INFO : Informed scheduler that task   InteractionTraining____samples_trivago____epsilon___0_1__4fc1370d9d   has status   DONE
  DEBUG: Asking scheduler for work...

The best way to run is in **Script Mode:**:

.. code-block:: console

  $ PYTHONPATH="." luigi --module mars_gym.simulation.interaction InteractionTraining \
  --project samples.trivago_simple.config.trivago_rio \
  --recommender-module-class samples.trivago_simple.simulation.SimpleLinearModel \
  --recommender-extra-params '{"n_factors": 10, "metadata_size": 148, "window_hist_size": 5}' \
  --bandit-policy-class samples.trivago_simple.simulation.EGreedyPolicy \
  --bandit-policy-params '{"epsilon": 0.1}' \
  --obs-batch-size 100

  ...
  ...
  Interaction Stats (75.36%)
            count      mean       std
  dataset
  all      7300.0  0.044110  0.205353
  train    5840.0  0.042808  0.202442
  valid    1460.0  0.049315  0.216599

  Saving logs...
  Saving test set predictions...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 4063441.72it/s]
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 3831989.55it/s]
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:16<00:00, 151.33it/s]

  INFO: Informed scheduler that task   InteractionTraining____samples_trivago____epsilon___0_1__4fc1370d9d   has status   DONE
  2020-06-22 08:41:37,842 : INFO : Informed scheduler that task   InteractionTraining____samples_trivago____epsilon___0_1__4fc1370d9d   has status   DONE
  DEBUG: Asking scheduler for work...

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


* TASK_DIR/params.json
* TASK_DIR/sim-datalog.csv
* TASK_DIR/index_mapping.pkl
* TASK_DIR/bandit.pkl
* TASK_DIR/weights.pt
* TASK_DIR/test_set_predictions.csv

Supervised Learning
*******************

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.


.. code-block:: console

  $ PYTHONPATH="." luigi --module mars_gym.simulation.training SupervisedModelTraining \
  --project samples.trivago_simple.config.trivago_rio\
  --recommender-module-class samples.trivago_simple.simulation.SimpleLinearModel\
  --recommender-extra-params '{"n_factors": 10, "metadata_size": 148, "window_hist_size": 5}'\
  --early-stopping-min-delta 0.0001 --negative-proportion 0.8\
  --learning-rate 0.0001 --epochs 50 --batch-size 100


  ...
  ...
  DEBUG: Checking if SupervisedModelTraining(project=samples.trivago_simple.config.trivago_rio, sample_size=-1, minimum_interactions=5, session_test_size=0.1, test_size=0.2, dataset_split_method=time, test_split_type=random, val_size=0.2, n_splits=5, split_index=0, data_frames_preparation_extra_params={}, sampling_strategy=none, balance_fields=[], sampling_proportions={}, use_sampling_in_validation=False, eq_filters={}, neq_filters={}, isin_filters={}, seed=42, observation=, negative_proportion=0.8, recommender_module_class=samples.trivago_simple.simulation.SimpleLinearModel, recommender_extra_params={"n_factors": 10, "metadata_size": 148, "window_hist_size": 5}, device=cuda, batch_size=100, epochs=50, optimizer=adam, optimizer_params={}, learning_rate=0.0001, loss_function=mse, loss_function_params={}, gradient_norm_clipping=0.0, gradient_norm_clipping_type=2, early_stopping_patience=5, early_stopping_min_delta=0.0001, monitor_metric=val_loss, monitor_mode=min, generator_workers=0, pin_memory=False, policy_estimator_extra_params={}, metrics=["loss"], bandit_policy_class=mars_gym.model.bandit.ModelPolicy, bandit_policy_params={}) is complete
  ...
  20/50(t): 100%|████████████████████████████████████████████████████████████████| 388/388 [00:01<00:00, 242.70it/s, loss=0.129, running_loss=0.1277]
  20/50(v): 100%|███████████████████████████████████████████████████████████████████████████████████| 97/97 [00:00<00:00, 323.86it/s, val_loss=0.125]
  21/50(t): 100%|████████████████████████████████████████████████████████████████| 388/388 [00:01<00:00, 201.85it/s, loss=0.1291, running_loss=0.129]
  21/50(v): 100%|██████████████████████████████████████████████████████████████████████████████████| 97/97 [00:00<00:00, 323.73it/s, val_loss=0.1252]
  Saving test set predictions...
  100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 3655489.13it/s]
  100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 3219842.88it/s]
  100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:13<00:00, 181.27it/s]
  ...


.. image:: ../../images/supervised_learning/history.jpg
  :width: 700


Evaluation
**********

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: console

  $ PYTHONPATH="." luigi --module mars_gym.evaluation.task EvaluateTestSetPredictions \
  --model-task-id InteractionTraining____samples_trivago____epsilon___0_1__4fc1370d9d \
  --model-task-class mars_gym.simulation.interaction.InteractionTraining

  DEBUG: Checking if EvaluateTestSetPredictions(model_task_class=mars_gym.simulation.interaction.InteractionTraining, model_task_id=InteractionTraining____samples_trivago____epsilon___1__50e3124699, offpolicy_eval=False, task_hash=none, direct_estimator_class=None, direct_estimator_negative_proportion=0.8, direct_estimator_batch_size=500, direct_estimator_epochs=50, eval_cips_cap=15, policy_estimator_extra_params={}, num_processes=12, fairness_columns=[]) is complete
  2020-06-22 09:36:41,042 : DEBUG : Pending tasks: 1
  INFO: [pid 15069] Worker Worker(salt=021781557, workers=1, host=marlesson-pc, username=marlesson, pid=15069) running   EvaluateTestSetPredictions(model_task_class=mars_gym.simulation.interaction.InteractionTraining, model_task_id=InteractionTraining____samples_trivago____epsilon___1__50e3124699, offpolicy_eval=False, task_hash=none, direct_estimator_class=None, direct_estimator_negative_proportion=0.8, direct_estimator_batch_size=500, direct_estimator_epochs=50, eval_cips_cap=15, policy_estimator_extra_params={}, num_processes=12, fairness_columns=[])
  2020-06-22 09:36:41,043 : INFO : [pid 15069] Worker Worker(salt=021781557, workers=1, host=marlesson-pc, username=marlesson, pid=15069) running   EvaluateTestSetPredictions(model_task_class=mars_gym.simulation.interaction.InteractionTraining, model_task_id=InteractionTraining____samples_trivago____epsilon___1__50e3124699, offpolicy_eval=False, task_hash=none, direct_estimator_class=None, direct_estimator_negative_proportion=0.8, direct_estimator_batch_size=500, direct_estimator_epochs=50, eval_cips_cap=15, policy_estimator_extra_params={}, num_processes=12, fairness_columns=[])
  Creating the relevance lists...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2422/2422 [00:00<00:00, 4252241.23it/s]
  100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 818/818 [00:00<00:00, 2999074.01it/s]
  Rank Metrics...
  Calculating average precision...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5271/5271 [00:00<00:00, 4507273.47it/s]
  Calculating precision at 1...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5271/5271 [00:00<00:00, 4080505.05it/s]
  Calculating nDCG at 5...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5271/5271 [00:00<00:00, 4734084.88it/s]
  Calculating nDCG at 15...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5271/5271 [00:00<00:00, 4644574.87it/s]
  Calculating nDCG at 20...
  100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5271/5271 [00:00<00:00, 4636781.96it/s]
  Fairness Metrics
  Offpolice Metrics
  2020-06-22 09:36:43,525 : INFO : Informed scheduler that task   EvaluateTestSetPredictions_500_None_50_61a88a638d   has status   DONE

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

* EVALUATION_DIR/metrics.json
* EVALUATION_DIR/rank_metrics.csv
* EVALUATION_DIR/df_offpolicy.csv
* EVALUATION_DIR/fairness_df.csv
* EVALUATION_DIR/fairness_metrics.csv

**Evaluation Platform**

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

.. code-block:: console

  $ streamlit run tools/eval_viz/app.py

  You can now view your Streamlit app in your browser.
  Local URL: http://localhost:8501
  Network URL: http://10.0.0.103:8501


.. image:: ../../images/dataviz/image2.png
  :width: 700

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum augue diam, placerat ut urna tincidunt, tristique eleifend felis. Duis tellus libero, commodo vitae mauris eu, suscipit mollis leo. Quisque in nulla fermentum, iaculis risus eu, sollicitudin est. Mauris quis elementum metus. Maecenas mattis efficitur diam at tempor. Integer consequat gravida sagittis. Nam a ultrices odio.

